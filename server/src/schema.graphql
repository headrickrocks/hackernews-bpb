type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: LinkOrderByInput
    userOrderBy: UserOrderByInput
    commentOrderBy: CommentOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  links: [Link!]!
  count: Int!
  users: [User!]
  comments: [Comment!]
}

type Mutation {
  post(url: String!, description: String!, tag: String): Link!
  comment(title: String!, content: String!): Comment!
  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote
}

type Subscription {
  newLink: Link
  newVote: Vote
  newComment: Comment
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Link {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
  tag: String
}

type Comment {
  id: ID!
  title: String
  content: String
  postedBy: User
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

input LinkOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

input UserOrderByInput {
  name: Sort
  email: Sort
  id: Sort
}

input CommentOrderByInput {
  title: Sort
  content: Sort
  id: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
